---
layout: post
title:  "Android并发编程的重要性"
date:   2019-08-07 13:21:00 +0800
categories: Android
---

> **为什么会有这个议题**

曾听公司一个后台技术小哥在旁与人谈到并发编程的重要性, 说到兴处又不免要调侃一下对面的安卓开发小哥: "并发, 对后台技术来讲才是最重要的, 你们搞客户端的不需要了解太深."

不得不先对他前半句话表示肯定, 毕竟由于高并发带来的坑已经压得后台技术们苦不堪言了, 也只有在后台技术中才会碰到这种情况, 但是这并不代表并发在客户端开发中就不重要了. 

> **并发与并发编程的概念**

在同一段时间里, 有几个任务想要同时进行中, 即可以称这几个任务"并发". 它们可以运行于同一进程的各自线程里, 也可以在不同的进程中, 若它们还会共同依赖一组共享对象, 那么, 在当前运行的多处理器环境中, 我们为了保证操作这些共享对象的正确性而做的代码工作, 即并发编程.

> **准备分两方面展开谈Android并发编程的重要性, 这两方面分别是?**

去谈一个技术的重要程度, 它一定会涉及两方面: 价值与风险. 风险高价值低的事, 可能只能停留在学习调研阶段(比如在单一工具类应用里采用插件化技术). 价值高风险低, 一般是一些经过大众验证的成熟方案(人多&坑少&文档全). 只有价值和风险兼备的技术, 重要程度才是相对最高的, 比如并发编程.

> **先说说Android开发中并发编程的价值**

讲真, 就算是面对Web前端开发, 开头提到的那位小哥也是冒着被人用Web Worker怼回来的风险的, 何况安卓开发中可以使用Java和Linux几乎全部的接口. 但是, 他的确说出了客户端开发者们心中一个理想化的开发状态: 

<font color=#7b0c00>**"单进程, 单线程; 无互斥, 无并发."**</font>

相比使用多线程, 一个单线程应用会更易于被人理解和预测结果, 因为它是建立在一套"简单而完备的抽象"之上的: 每个任务(一个任务即一个代码调用链)的各个步骤(各行代码)均按顺序独立执行, 待当前任务执行完毕下一个任务才会开始. 

在这样的抽象之上, 我们就可以毫不关心底层处理器和存储器的优化, 甚至也不用知道虚拟机抽象层的内存模型, 代码用在刀刃(核心业务)上, 开发维护成本大大降低. 架构设计者们也能腾出精力在开发效率上, 可以想想JS的响应式设计框架.

> **再说说Android开发中并发编程的风险**

做软件开发是件复杂的事情, 为了将复杂度降低, 我们会讲究分层分模块. 同样, 在这里我要讲一个技术, 如果不先说清楚要在哪一层展开讲, 那可能会毫无重点的上下乱窜.

那么这里说的GUI开发中理论上可以不需要多线程. 可惜现实世界与理想差距太远了, 复杂度远远超过了预期, 不要忽略它.

<font color=#ccc size=1>工作之余看窗外的风景是一种享受但是公司没有窗户.</font>
